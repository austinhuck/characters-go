// Code generated by goa v3.9.1, DO NOT EDIT.
//
// character service
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package character

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Character service.
type Service interface {
	// GetCharacters implements getCharacters.
	GetCharacters(context.Context) (res []*Character, err error)
	// GetCharacter implements getCharacter.
	GetCharacter(context.Context, *CharacterID) (res *Character, err error)
	// CreateCharacter implements createCharacter.
	CreateCharacter(context.Context, *CharacterNew) (res *Character, err error)
	// UpdateCharacter implements updateCharacter.
	UpdateCharacter(context.Context, *Character) (res *Character, err error)
	// DeleteCharacter implements deleteCharacter.
	DeleteCharacter(context.Context, *CharacterID) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "character"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"getCharacters", "getCharacter", "createCharacter", "updateCharacter", "deleteCharacter"}

// Character is the result type of the character service getCharacter method.
type Character struct {
	// Character identifier
	ID int
	// Character name
	Name string
	// Character description
	Description string
	// Character health
	Health uint
	// Character experience
	Experience uint
}

// CharacterID is the payload type of the character service getCharacter method.
type CharacterID struct {
	// Character identifier
	ID int
}

// CharacterNew is the payload type of the character service createCharacter
// method.
type CharacterNew struct {
	// Character name
	Name string
	// Character description
	Description string
	// Character health
	Health uint
	// Character experience
	Experience uint
}

// MakeIDNotFound builds a goa.ServiceError from an error.
func MakeIDNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "IdNotFound", false, false, false)
}

// MakeBadData builds a goa.ServiceError from an error.
func MakeBadData(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadData", false, false, false)
}

// MakeIDsExhausted builds a goa.ServiceError from an error.
func MakeIDsExhausted(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "IDsExhausted", false, false, false)
}
