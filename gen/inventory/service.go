// Code generated by goa v3.9.1, DO NOT EDIT.
//
// inventory service
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package inventory

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Inventory service.
type Service interface {
	// GetInventory implements getInventory.
	GetInventory(context.Context, *CharacterID) (res []*InventoryEntry, err error)
	// UpdateInventory implements updateInventory.
	UpdateInventory(context.Context, *InventoryUpdate) (err error)
	// ClearInventory implements clearInventory.
	ClearInventory(context.Context, *CharacterID) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "inventory"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"getInventory", "updateInventory", "clearInventory"}

// CharacterID is the payload type of the inventory service getInventory method.
type CharacterID struct {
	// Character identifier
	ID int
}

// Character inventory entry
type InventoryEntry struct {
	// Item ID
	Item int
	// Quantity of the item
	Quantity uint
}

// InventoryUpdate is the payload type of the inventory service updateInventory
// method.
type InventoryUpdate struct {
	// Character ID
	ID int
	// Item ID
	Item int
	// Quantity of the item
	Quantity uint
}

// MakeIDNotFound builds a goa.ServiceError from an error.
func MakeIDNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "IdNotFound", false, false, false)
}

// MakeBadData builds a goa.ServiceError from an error.
func MakeBadData(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadData", false, false, false)
}

// MakeIDsExhausted builds a goa.ServiceError from an error.
func MakeIDsExhausted(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "IDsExhausted", false, false, false)
}
