// Code generated by goa v3.9.1, DO NOT EDIT.
//
// item endpoints
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package item

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "item" service endpoints.
type Endpoints struct {
	GetItems   goa.Endpoint
	GetItem    goa.Endpoint
	CreateItem goa.Endpoint
	UpdateItem goa.Endpoint
	DeleteItem goa.Endpoint
}

// NewEndpoints wraps the methods of the "item" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetItems:   NewGetItemsEndpoint(s),
		GetItem:    NewGetItemEndpoint(s),
		CreateItem: NewCreateItemEndpoint(s),
		UpdateItem: NewUpdateItemEndpoint(s),
		DeleteItem: NewDeleteItemEndpoint(s),
	}
}

// Use applies the given middleware to all the "item" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetItems = m(e.GetItems)
	e.GetItem = m(e.GetItem)
	e.CreateItem = m(e.CreateItem)
	e.UpdateItem = m(e.UpdateItem)
	e.DeleteItem = m(e.DeleteItem)
}

// NewGetItemsEndpoint returns an endpoint function that calls the method
// "getItems" of service "item".
func NewGetItemsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetItems(ctx)
	}
}

// NewGetItemEndpoint returns an endpoint function that calls the method
// "getItem" of service "item".
func NewGetItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ItemID)
		return s.GetItem(ctx, p)
	}
}

// NewCreateItemEndpoint returns an endpoint function that calls the method
// "createItem" of service "item".
func NewCreateItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ItemNew)
		return s.CreateItem(ctx, p)
	}
}

// NewUpdateItemEndpoint returns an endpoint function that calls the method
// "updateItem" of service "item".
func NewUpdateItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Item)
		return s.UpdateItem(ctx, p)
	}
}

// NewDeleteItemEndpoint returns an endpoint function that calls the method
// "deleteItem" of service "item".
func NewDeleteItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ItemID)
		return nil, s.DeleteItem(ctx, p)
	}
}
