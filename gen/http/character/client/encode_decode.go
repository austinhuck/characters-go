// Code generated by goa v3.9.1, DO NOT EDIT.
//
// character HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	character "github.com/austinhuck/characters-go/gen/character"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetCharactersRequest instantiates a HTTP request object with method and
// path set to call the "character" service "getCharacters" endpoint
func (c *Client) BuildGetCharactersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCharactersCharacterPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("character", "getCharacters", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCharactersResponse returns a decoder for responses returned by the
// character getCharacters endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetCharactersResponse may return the following errors:
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - error: internal error
func DecodeGetCharactersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCharactersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacters", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateCharacterResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacters", err)
			}
			res := NewGetCharactersCharacterOK(body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetCharactersIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacters", err)
			}
			err = ValidateGetCharactersIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacters", err)
			}
			return nil, NewGetCharactersIDNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetCharactersBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacters", err)
			}
			err = ValidateGetCharactersBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacters", err)
			}
			return nil, NewGetCharactersBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body GetCharactersIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacters", err)
			}
			err = ValidateGetCharactersIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacters", err)
			}
			return nil, NewGetCharactersIDsExhausted(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("character", "getCharacters", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCharacterRequest instantiates a HTTP request object with method and
// path set to call the "character" service "getCharacter" endpoint
func (c *Client) BuildGetCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*character.CharacterID)
		if !ok {
			return nil, goahttp.ErrInvalidType("character", "getCharacter", "*character.CharacterID", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCharacterCharacterPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("character", "getCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCharacterResponse returns a decoder for responses returned by the
// character getCharacter endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetCharacterResponse may return the following errors:
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - error: internal error
func DecodeGetCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacter", err)
			}
			err = ValidateGetCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacter", err)
			}
			res := NewGetCharacterCharacterOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetCharacterIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacter", err)
			}
			err = ValidateGetCharacterIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacter", err)
			}
			return nil, NewGetCharacterIDNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetCharacterBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacter", err)
			}
			err = ValidateGetCharacterBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacter", err)
			}
			return nil, NewGetCharacterBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body GetCharacterIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "getCharacter", err)
			}
			err = ValidateGetCharacterIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "getCharacter", err)
			}
			return nil, NewGetCharacterIDsExhausted(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("character", "getCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "character" service "createCharacter" endpoint
func (c *Client) BuildCreateCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCharacterCharacterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("character", "createCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCharacterRequest returns an encoder for requests sent to the
// character createCharacter server.
func EncodeCreateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*character.CharacterNew)
		if !ok {
			return goahttp.ErrInvalidType("character", "createCharacter", "*character.CharacterNew", v)
		}
		body := NewCreateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("character", "createCharacter", err)
		}
		return nil
	}
}

// DecodeCreateCharacterResponse returns a decoder for responses returned by
// the character createCharacter endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateCharacterResponse may return the following errors:
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeCreateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "createCharacter", err)
			}
			err = ValidateCreateCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "createCharacter", err)
			}
			res := NewCreateCharacterCharacterOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCharacterBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "createCharacter", err)
			}
			err = ValidateCreateCharacterBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "createCharacter", err)
			}
			return nil, NewCreateCharacterBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body CreateCharacterIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "createCharacter", err)
			}
			err = ValidateCreateCharacterIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "createCharacter", err)
			}
			return nil, NewCreateCharacterIDsExhausted(&body)
		case http.StatusNotFound:
			var (
				body CreateCharacterIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "createCharacter", err)
			}
			err = ValidateCreateCharacterIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "createCharacter", err)
			}
			return nil, NewCreateCharacterIDNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("character", "createCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "character" service "updateCharacter" endpoint
func (c *Client) BuildUpdateCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*character.Character)
		if !ok {
			return nil, goahttp.ErrInvalidType("character", "updateCharacter", "*character.Character", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCharacterCharacterPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("character", "updateCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCharacterRequest returns an encoder for requests sent to the
// character updateCharacter server.
func EncodeUpdateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*character.Character)
		if !ok {
			return goahttp.ErrInvalidType("character", "updateCharacter", "*character.Character", v)
		}
		body := NewUpdateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("character", "updateCharacter", err)
		}
		return nil
	}
}

// DecodeUpdateCharacterResponse returns a decoder for responses returned by
// the character updateCharacter endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateCharacterResponse may return the following errors:
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - error: internal error
func DecodeUpdateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "updateCharacter", err)
			}
			err = ValidateUpdateCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "updateCharacter", err)
			}
			res := NewUpdateCharacterCharacterOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateCharacterIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "updateCharacter", err)
			}
			err = ValidateUpdateCharacterIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "updateCharacter", err)
			}
			return nil, NewUpdateCharacterIDNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateCharacterBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "updateCharacter", err)
			}
			err = ValidateUpdateCharacterBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "updateCharacter", err)
			}
			return nil, NewUpdateCharacterBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body UpdateCharacterIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "updateCharacter", err)
			}
			err = ValidateUpdateCharacterIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "updateCharacter", err)
			}
			return nil, NewUpdateCharacterIDsExhausted(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("character", "updateCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCharacterRequest instantiates a HTTP request object with method
// and path set to call the "character" service "deleteCharacter" endpoint
func (c *Client) BuildDeleteCharacterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*character.CharacterID)
		if !ok {
			return nil, goahttp.ErrInvalidType("character", "deleteCharacter", "*character.CharacterID", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCharacterCharacterPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("character", "deleteCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteCharacterResponse returns a decoder for responses returned by
// the character deleteCharacter endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteCharacterResponse may return the following errors:
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - error: internal error
func DecodeDeleteCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteCharacterIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "deleteCharacter", err)
			}
			err = ValidateDeleteCharacterIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "deleteCharacter", err)
			}
			return nil, NewDeleteCharacterIDNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteCharacterBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "deleteCharacter", err)
			}
			err = ValidateDeleteCharacterBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "deleteCharacter", err)
			}
			return nil, NewDeleteCharacterBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body DeleteCharacterIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("character", "deleteCharacter", err)
			}
			err = ValidateDeleteCharacterIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("character", "deleteCharacter", err)
			}
			return nil, NewDeleteCharacterIDsExhausted(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("character", "deleteCharacter", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCharacterResponseToCharacterCharacter builds a value of type
// *character.Character from a value of type *CharacterResponse.
func unmarshalCharacterResponseToCharacterCharacter(v *CharacterResponse) *character.Character {
	res := &character.Character{
		ID:          *v.ID,
		Name:        *v.Name,
		Description: *v.Description,
		Health:      *v.Health,
		Experience:  *v.Experience,
	}

	return res
}
