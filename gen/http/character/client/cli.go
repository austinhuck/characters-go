// Code generated by goa v3.9.1, DO NOT EDIT.
//
// character HTTP client CLI support package
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	character "github.com/austinhuck/characters-go/gen/character"
)

// BuildGetCharacterPayload builds the payload for the character getCharacter
// endpoint from CLI flags.
func BuildGetCharacterPayload(characterGetCharacterID string) (*character.CharacterID, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(characterGetCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &character.CharacterID{}
	v.ID = id

	return v, nil
}

// BuildCreateCharacterPayload builds the payload for the character
// createCharacter endpoint from CLI flags.
func BuildCreateCharacterPayload(characterCreateCharacterBody string) (*character.CharacterNew, error) {
	var err error
	var body CreateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(characterCreateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Maxime non error dignissimos.\",\n      \"experience\": 11895619109444395021,\n      \"health\": 13825686865421341647,\n      \"name\": \"Voluptates accusamus voluptas.\"\n   }'")
		}
	}
	v := &character.CharacterNew{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v, nil
}

// BuildUpdateCharacterPayload builds the payload for the character
// updateCharacter endpoint from CLI flags.
func BuildUpdateCharacterPayload(characterUpdateCharacterBody string, characterUpdateCharacterID string) (*character.Character, error) {
	var err error
	var body UpdateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(characterUpdateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Qui ut.\",\n      \"experience\": 6143131330256813255,\n      \"health\": 16114915148797695919,\n      \"name\": \"Reiciendis eius a totam.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(characterUpdateCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &character.Character{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteCharacterPayload builds the payload for the character
// deleteCharacter endpoint from CLI flags.
func BuildDeleteCharacterPayload(characterDeleteCharacterID string) (*character.CharacterID, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(characterDeleteCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &character.CharacterID{}
	v.ID = id

	return v, nil
}
