// Code generated by goa v3.9.1, DO NOT EDIT.
//
// inventory client HTTP transport
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the inventory service endpoint HTTP clients.
type Client struct {
	// GetInventory Doer is the HTTP client used to make requests to the
	// getInventory endpoint.
	GetInventoryDoer goahttp.Doer

	// UpdateInventory Doer is the HTTP client used to make requests to the
	// updateInventory endpoint.
	UpdateInventoryDoer goahttp.Doer

	// ClearInventory Doer is the HTTP client used to make requests to the
	// clearInventory endpoint.
	ClearInventoryDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the inventory service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetInventoryDoer:    doer,
		UpdateInventoryDoer: doer,
		ClearInventoryDoer:  doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GetInventory returns an endpoint that makes HTTP requests to the inventory
// service getInventory server.
func (c *Client) GetInventory() goa.Endpoint {
	var (
		decodeResponse = DecodeGetInventoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetInventoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetInventoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("inventory", "getInventory", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateInventory returns an endpoint that makes HTTP requests to the
// inventory service updateInventory server.
func (c *Client) UpdateInventory() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateInventoryRequest(c.encoder)
		decodeResponse = DecodeUpdateInventoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateInventoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateInventoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("inventory", "updateInventory", err)
		}
		return decodeResponse(resp)
	}
}

// ClearInventory returns an endpoint that makes HTTP requests to the inventory
// service clearInventory server.
func (c *Client) ClearInventory() goa.Endpoint {
	var (
		decodeResponse = DecodeClearInventoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildClearInventoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ClearInventoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("inventory", "clearInventory", err)
		}
		return decodeResponse(resp)
	}
}
