// Code generated by goa v3.9.1, DO NOT EDIT.
//
// inventory HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	inventory "github.com/austinhuck/characters-go/gen/inventory"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetInventoryRequest instantiates a HTTP request object with method and
// path set to call the "inventory" service "getInventory" endpoint
func (c *Client) BuildGetInventoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*inventory.CharacterID)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "getInventory", "*inventory.CharacterID", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetInventoryInventoryPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "getInventory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetInventoryResponse returns a decoder for responses returned by the
// inventory getInventory endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetInventoryResponse may return the following errors:
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - error: internal error
func DecodeGetInventoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetInventoryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "getInventory", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateInventoryEntryResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "getInventory", err)
			}
			res := NewGetInventoryInventoryEntryOK(body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetInventoryIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "getInventory", err)
			}
			err = ValidateGetInventoryIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "getInventory", err)
			}
			return nil, NewGetInventoryIDNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetInventoryBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "getInventory", err)
			}
			err = ValidateGetInventoryBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "getInventory", err)
			}
			return nil, NewGetInventoryBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body GetInventoryIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "getInventory", err)
			}
			err = ValidateGetInventoryIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "getInventory", err)
			}
			return nil, NewGetInventoryIDsExhausted(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "getInventory", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateInventoryRequest instantiates a HTTP request object with method
// and path set to call the "inventory" service "updateInventory" endpoint
func (c *Client) BuildUpdateInventoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*inventory.InventoryUpdate)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "updateInventory", "*inventory.InventoryUpdate", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateInventoryInventoryPath(id)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "updateInventory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateInventoryRequest returns an encoder for requests sent to the
// inventory updateInventory server.
func EncodeUpdateInventoryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*inventory.InventoryUpdate)
		if !ok {
			return goahttp.ErrInvalidType("inventory", "updateInventory", "*inventory.InventoryUpdate", v)
		}
		body := NewUpdateInventoryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("inventory", "updateInventory", err)
		}
		return nil
	}
}

// DecodeUpdateInventoryResponse returns a decoder for responses returned by
// the inventory updateInventory endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateInventoryResponse may return the following errors:
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - error: internal error
func DecodeUpdateInventoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UpdateInventoryIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "updateInventory", err)
			}
			err = ValidateUpdateInventoryIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "updateInventory", err)
			}
			return nil, NewUpdateInventoryIDNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateInventoryBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "updateInventory", err)
			}
			err = ValidateUpdateInventoryBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "updateInventory", err)
			}
			return nil, NewUpdateInventoryBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body UpdateInventoryIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "updateInventory", err)
			}
			err = ValidateUpdateInventoryIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "updateInventory", err)
			}
			return nil, NewUpdateInventoryIDsExhausted(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "updateInventory", resp.StatusCode, string(body))
		}
	}
}

// BuildClearInventoryRequest instantiates a HTTP request object with method
// and path set to call the "inventory" service "clearInventory" endpoint
func (c *Client) BuildClearInventoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*inventory.CharacterID)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "clearInventory", "*inventory.CharacterID", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ClearInventoryInventoryPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "clearInventory", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeClearInventoryResponse returns a decoder for responses returned by the
// inventory clearInventory endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeClearInventoryResponse may return the following errors:
//   - "IdNotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadData" (type *goa.ServiceError): http.StatusBadRequest
//   - "IDsExhausted" (type *goa.ServiceError): http.StatusInsufficientStorage
//   - error: internal error
func DecodeClearInventoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body ClearInventoryIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "clearInventory", err)
			}
			err = ValidateClearInventoryIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "clearInventory", err)
			}
			return nil, NewClearInventoryIDNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ClearInventoryBadDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "clearInventory", err)
			}
			err = ValidateClearInventoryBadDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "clearInventory", err)
			}
			return nil, NewClearInventoryBadData(&body)
		case http.StatusInsufficientStorage:
			var (
				body ClearInventoryIDsExhaustedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "clearInventory", err)
			}
			err = ValidateClearInventoryIDsExhaustedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "clearInventory", err)
			}
			return nil, NewClearInventoryIDsExhausted(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "clearInventory", resp.StatusCode, string(body))
		}
	}
}

// unmarshalInventoryEntryResponseToInventoryInventoryEntry builds a value of
// type *inventory.InventoryEntry from a value of type *InventoryEntryResponse.
func unmarshalInventoryEntryResponseToInventoryInventoryEntry(v *InventoryEntryResponse) *inventory.InventoryEntry {
	res := &inventory.InventoryEntry{
		Item:     *v.Item,
		Quantity: *v.Quantity,
	}

	return res
}
