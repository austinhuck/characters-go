// Code generated by goa v3.9.1, DO NOT EDIT.
//
// item client HTTP transport
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the item service endpoint HTTP clients.
type Client struct {
	// GetItems Doer is the HTTP client used to make requests to the getItems
	// endpoint.
	GetItemsDoer goahttp.Doer

	// GetItem Doer is the HTTP client used to make requests to the getItem
	// endpoint.
	GetItemDoer goahttp.Doer

	// CreateItem Doer is the HTTP client used to make requests to the createItem
	// endpoint.
	CreateItemDoer goahttp.Doer

	// UpdateItem Doer is the HTTP client used to make requests to the updateItem
	// endpoint.
	UpdateItemDoer goahttp.Doer

	// DeleteItem Doer is the HTTP client used to make requests to the deleteItem
	// endpoint.
	DeleteItemDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the item service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetItemsDoer:        doer,
		GetItemDoer:         doer,
		CreateItemDoer:      doer,
		UpdateItemDoer:      doer,
		DeleteItemDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GetItems returns an endpoint that makes HTTP requests to the item service
// getItems server.
func (c *Client) GetItems() goa.Endpoint {
	var (
		decodeResponse = DecodeGetItemsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetItemsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetItemsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("item", "getItems", err)
		}
		return decodeResponse(resp)
	}
}

// GetItem returns an endpoint that makes HTTP requests to the item service
// getItem server.
func (c *Client) GetItem() goa.Endpoint {
	var (
		decodeResponse = DecodeGetItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("item", "getItem", err)
		}
		return decodeResponse(resp)
	}
}

// CreateItem returns an endpoint that makes HTTP requests to the item service
// createItem server.
func (c *Client) CreateItem() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateItemRequest(c.encoder)
		decodeResponse = DecodeCreateItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("item", "createItem", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateItem returns an endpoint that makes HTTP requests to the item service
// updateItem server.
func (c *Client) UpdateItem() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateItemRequest(c.encoder)
		decodeResponse = DecodeUpdateItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("item", "updateItem", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteItem returns an endpoint that makes HTTP requests to the item service
// deleteItem server.
func (c *Client) DeleteItem() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteItemResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteItemRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteItemDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("item", "deleteItem", err)
		}
		return decodeResponse(resp)
	}
}
