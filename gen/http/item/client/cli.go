// Code generated by goa v3.9.1, DO NOT EDIT.
//
// item HTTP client CLI support package
//
// Command:
// $ goa gen github.com/austinhuck/characters-go/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	item "github.com/austinhuck/characters-go/gen/item"
)

// BuildGetItemPayload builds the payload for the item getItem endpoint from
// CLI flags.
func BuildGetItemPayload(itemGetItemID string) (*item.ItemID, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(itemGetItemID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &item.ItemID{}
	v.ID = id

	return v, nil
}

// BuildCreateItemPayload builds the payload for the item createItem endpoint
// from CLI flags.
func BuildCreateItemPayload(itemCreateItemBody string) (*item.ItemNew, error) {
	var err error
	var body CreateItemRequestBody
	{
		err = json.Unmarshal([]byte(itemCreateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 605133029443553342,\n      \"description\": \"Quae ea velit iste deserunt occaecati.\",\n      \"healing\": 9434446331462297666,\n      \"name\": \"Iste laborum ut ullam perferendis.\",\n      \"protection\": 6811333696036567306\n   }'")
		}
	}
	v := &item.ItemNew{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v, nil
}

// BuildUpdateItemPayload builds the payload for the item updateItem endpoint
// from CLI flags.
func BuildUpdateItemPayload(itemUpdateItemBody string, itemUpdateItemID string) (*item.Item, error) {
	var err error
	var body UpdateItemRequestBody
	{
		err = json.Unmarshal([]byte(itemUpdateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 8836063704909434334,\n      \"description\": \"Illo ipsam voluptate magni minima.\",\n      \"healing\": 7974778561697912772,\n      \"name\": \"Sit id modi ut dolor ipsum.\",\n      \"protection\": 267106854576953551\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(itemUpdateItemID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &item.Item{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteItemPayload builds the payload for the item deleteItem endpoint
// from CLI flags.
func BuildDeleteItemPayload(itemDeleteItemID string) (*item.ItemID, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(itemDeleteItemID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &item.ItemID{}
	v.ID = id

	return v, nil
}
